import { __assign, __rest } from "tslib";
import React, { useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';
var ReactSelectionPopup = function (_a, ref) {
    var onSelect = _a.onSelect, onClose = _a.onClose, children = _a.children, selectionClassName = _a.selectionClassName, _b = _a.multipleSelection, multipleSelection = _b === void 0 ? true : _b, metaAttrName = _a.metaAttrName, _c = _a.offsetToLeft, offsetToLeft = _c === void 0 ? 0 : _c, _d = _a.offsetToTop, offsetToTop = _d === void 0 ? 0 : _d, rest = __rest(_a, ["onSelect", "onClose", "children", "selectionClassName", "multipleSelection", "metaAttrName", "offsetToLeft", "offsetToTop"]);
    var _e = useState({ width: 0, height: 0 }), size = _e[0], setSize = _e[1];
    var _f = useState(null), position = _f[0], setPosition = _f[1];
    var popupRef = useRef(null);
    var positionRef = useRef(null);
    positionRef.current = position;
    var isPopupContent = useCallback(function (e) {
        var node = e.target;
        // Check if the target div is popup which is the exception case
        while (node != null) {
            if (node === popupRef.current) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }, []);
    var close = useCallback(function () {
        setPosition(null);
        onClose === null || onClose === void 0 ? void 0 : onClose();
    }, [onClose]);
    useEffect(function () {
        var onMouseUp = function (e) {
            var selection = window.getSelection();
            if (selection !== null) {
                var anchorNode = selection.anchorNode, focusNode = selection.focusNode;
                if (anchorNode !== null && focusNode !== null) {
                    if (anchorNode.parentElement !== null && anchorNode.parentElement.classList.contains(selectionClassName)) {
                        var text = selection.toString();
                        var meta = JSON.parse(e.target.getAttribute(metaAttrName));
                        if (text) {
                            if (!metaAttrName || meta) {
                                if (selection.rangeCount !== 0) {
                                    if (anchorNode.isEqualNode(focusNode) || multipleSelection) {
                                        var range = selection.getRangeAt(0);
                                        var _a = range.getBoundingClientRect(), x = _a.right, y = _a.top;
                                        // TODO: position {x, y} should come from the first line of selection
                                        setPosition({ x: x, y: y });
                                        onSelect === null || onSelect === void 0 ? void 0 : onSelect(text, meta);
                                        return;
                                    }
                                    else {
                                        selection.removeAllRanges();
                                    }
                                }
                            }
                            if (!isPopupContent(e)) {
                                close();
                            }
                        }
                        else {
                            setPosition(null);
                        }
                    }
                }
            }
        };
        var onMousedown = function (e) {
            var selection = window.getSelection();
            if (!isPopupContent(e) && positionRef.current !== null && selection !== null) {
                selection.removeAllRanges();
                close();
            }
        };
        var onScroll = function () {
            close();
        };
        window.addEventListener('mouseup', onMouseUp);
        window.addEventListener('mousedown', onMousedown);
        window.addEventListener('scroll', onScroll);
        return function () {
            window.removeEventListener('mouseup', onMouseUp);
            window.removeEventListener('mousedown', onMousedown);
            window.removeEventListener('scroll', onScroll);
        };
    }, [close, onSelect, onClose, isPopupContent, position, multipleSelection, selectionClassName, metaAttrName]);
    useEffect(function () {
        if (popupRef.current) {
            var width = popupRef.current.offsetWidth;
            var height = popupRef.current.offsetHeight;
            setSize({ width: width, height: height });
        }
    }, [children, position, popupRef]);
    useImperativeHandle(ref, function () {
        return {
            close: close
        };
    });
    if (position === null)
        return React.createElement(React.Fragment, null);
    var left = position.x - size.width - offsetToLeft;
    var top = position.y - size.height - offsetToTop;
    return (React.createElement("div", { style: { position: 'fixed', left: left, top: top, zIndex: 9999 } },
        React.createElement("div", __assign({ ref: popupRef }, rest), children)));
};
export default React.forwardRef(ReactSelectionPopup);
//# sourceMappingURL=index.js.map